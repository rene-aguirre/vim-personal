snippet args
"$@"
endsnippet

snippet array
# index: "${ARRAY[1]}", iterate: "${ARRAY[@]}"
${1:array_var}=(
	# one value per line, or separate with spaces
	${0:${VISUAL:item1}}
)
endsnippet

snippet bash
#!/usr/bin/env bash
endsnippet

snippet ifcmd
[ -x "$(command -v ${1:${VISUAL:cmd}})" ] ${2}
endsnippet

snippet dolist
for ${1:item} in ${2:${VISUAL:item1 item2 item3}}
do
	${3:echo $item}
done
endsnippet

snippet fileexists
[ -f ${1:${VISUAL:filename}} ] ${2}
endsnippet

snippet forin
for ${1:item} in ${2:"item1 item2"} ; do
	${0:${VISUAL}}
done
endsnippet

snippet forarray
declare -a ${1:StringArray}=( ${2:"Array" "Items" "with" "spaces"} )
for ${3:item} in \${$1[@]}; do
	${0:${VISUAL}}
done
endsnippet

snippet forfiles
for ${1:FILE_} in $(find ${2:.} -name "*.${3:txt}" -print); do
	${4:echo "\${$1}"}
done
endsnippet

snippet function
${1:foo}() {
	# output="\$($1 World)"
	${2:${VISUAL:echo "Hello \$1"}}
}
endsnippet

snippet sh
#!/usr/bin/env sh
endsnippet

snippet usage
show_usage() { 
	echo "This script does XYZ."
	echo -e "\nUsage:\n$0 [arguments] \n"
}

# at least one argument
if [  $# -lt 2 ]; then
	show_usage
	exit 1
fi

if [[ ( $# == "--help") ||  $# == "-h" ]]; then
	show_usage
	exit 0
fi

endsnippet

